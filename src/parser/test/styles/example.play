@meta {
	name("Swing")
	author("Jacob Bloom")
	description("You know the drill")
	playback-version(0.1)
}

@options {
	time-signature(4 4)
	swing() // is there a way to reverse boolean functions? swing(false)
}

@import "stdlib" as stdlib

// ***** DRUMS *****
@track "percussion" as drums {
	@pattern snare-hits {
		private()
		"Acoustic Snare" choose(
			<4>
			<2.5>
			<2.5 3.5 4.5>
		)
		chance(3/10) // evaluates to 0.3
		volume(1)
	}
	// if not it returns nil, if we end up with nil just don't play lol
	
	@pattern hi-hat {
		private()
		"Open Hi-Hat" <1 2 2.5 3 4 4.5> &
		"Closed Hi Hat" <2 4> // automatic overlay is stupid, simply throw when we get <> <> outside of args list
		volume(0.1)
	}
	@pattern drums-mixed {
		@pattern(snare-hits) &
		@pattern(piano.hi-hat) &
		@pattern(stdlib.drums.hi-hat) &
		{"Bass Drum" <1 2 3 4> volume(0.2)} // scopes are ok a lot of places but can only be named via @pattern
		// {...snare-hits} & {...hi-hat} & {"Bass Drum" <1 2 3 4> volume 0.2}
	}
}

@track(stdlib.jazz-guitar)

// ***** PIANO  *****
@track "acoustic_grand_piano" as piano { // "as" required.
	invertible()
	octave(4)
	
	@pattern maybe3 { // patterns that are ok with or without 3rd beat in measure
		choose(
		// make it clear in docs that all notes are relative to the given chord
			<1.5s:1c 2:1c 3.5:1c>
			{<1:1c 2.5s:1c 3.5:1c> volume(.5)} // deepest scope wins
			<1:1c 2.5:1c 3.5:1c 4.5:1c>
		)
		volume ( .3 )
	}
	@pattern no3 if(not beat-defined(3)) <1:1c:4 2.5:1c:4>
	
	@pattern multiMeasurePattern {
		length(8)
		<1 2 3 4 | 1 2 3 4> // this one solidifies <> as generic beat containers that could even contain partial measures a la <1 2>+<3 4>
		// the second interpretation can include the first
	}
	
	@pattern brainstorm if(not true) {
		private()
		<1:1 4/3:2 5/3:3 2:3 3:3 4:3>
	}
	
	@pattern myPattern if(chance(1/3) and true) volume(1)
	
}

// ***** BASS *****
@track "acoustic_bass" as bass {
	volume(1)
	octave(2)
	invertible()
	
	@pattern walk1 if(not progression(1 1)) {
		choose(
			<:1 :s :s :n7> // covers (1,2,2.5,3,4) & (1,2,3,4,5) & (1,6.5,6,5,6) but risks things like (1,1,1.5,1.5,2)
			<:1 :s :s :n2>
			<:1 :3 :5 :n7>
			<:1 :5 :3 :n7>
			<:1 :a :a :n7> // tries to arpeggiate in the chord of 1, else the key of 1, toward the final beat (smartly up or down)
		)
	}
	
	@pattern walk2 if(in-scale(1 n)) {
		<:1 :s :s :n5>
	}
}
